/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.crypto;

import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.math.BigInteger;

import civitas.crypto.*;

public interface CryptoFactory {
    /** Returns an array of length size that is a permutation, i.e. i maps to j iff ret[i] == j */
    int{*lbl}const[] createPermutation(label{*lbl} lbl, int{*lbl} size);

//    KeyPairPrincipal keyPair(String name, ElGamalPublicKey publicKey, ElGamalPrivateKey privateKey);
//    KeyPairPrincipal keyPair(String name, PublicKey publicKey);
//    KeyPairPrincipal keyPair(String name, PublicKey publicKey, PrivateKey privateKey);

    // TODO: it is unclear what the label on the return result should be.
    ElGamalPublicKey egPubKeyFromFile(String keyFile) throws (IllegalArgumentException{keyFile}, FileNotFoundException{keyFile}, IOException{keyFile});
    ElGamalPrivateKey egPrivKeyFromFile(String keyFile) throws (IllegalArgumentException{keyFile}, FileNotFoundException{keyFile}, IOException{keyFile});
    PublicKey publicKeyFromFile(String keyFile) throws (IllegalArgumentException{keyFile}, FileNotFoundException{keyFile}, IOException{keyFile});
    PrivateKey privateKeyFromFile(String keyFile) throws (IllegalArgumentException{keyFile}, FileNotFoundException{keyFile}, IOException{keyFile});

    KeyPair generateKeyPair(int keyLength);

    ElGamalParameters generateElGamalParameters();
    ElGamalKeyPair generateElGamalKeyPair(ElGamalParameters params);
    ElGamalKeyPairShare generateKeyPairShare(ElGamalParameters params);
    ElGamalKeyShare constructKeyShare(ElGamalKeyPairShare kps);
    ElGamalPublicKey{*lbl;shares} combineKeyShares(label{*lbl} lbl, ElGamalKeyShare{*lbl}[] shares) throws (CryptoException{*lbl; shares});
    ElGamalCiphertext elGamalEncrypt(ElGamalPublicKey key, ElGamalMsg msg);
    ElGamalCiphertext elGamalEncrypt(ElGamalPublicKey key, ElGamalMsg msg, ElGamalReencryptFactor r);
    ElGamalCiphertext{this;key} elGamalReencrypt(ElGamalPublicKey key, ElGamalCiphertext c);
    ElGamalCiphertext elGamalReencrypt(ElGamalPublicKey key, ElGamalCiphertext c, ElGamalReencryptFactor r);
    ElGamalReencryptFactor generateElGamalReencryptFactor(ElGamalParameters params);
    ElGamalSignedCiphertext elGamalSignedEncrypt(ElGamalPublicKey key, ElGamalMsg msg);
    ElGamalSignedCiphertext elGamalSignedEncrypt(ElGamalPublicKey key, ElGamalMsg msg, ElGamalReencryptFactor r);
    ElGamalSignedCiphertext elGamalSignedEncrypt(ElGamalPublicKey key, ElGamalMsg msg, ElGamalReencryptFactor r, byte{additionalEnv}const[] additionalEnv);
    boolean elGamalVerify(ElGamalParameters params, ElGamalSignedCiphertext ciphertext);
    boolean elGamalVerify(ElGamalParameters params, ElGamalSignedCiphertext ciphertext, byte{additionalEnv}const[] additionalEnv);
    ElGamalMsg elGamalDecrypt(ElGamalPrivateKey key, ElGamalCiphertext ciphertext) throws (CryptoException{key;ciphertext});
    ElGamalMsg elGamalDecrypt(ElGamalPrivateKey key, ElGamalSignedCiphertext ciphertext, byte{additionalEnv}const[] additionalEnv) throws (CryptoException{key;ciphertext});
    ElGamalProofKnowDiscLog constructProofKnowDiscLog(ElGamalParameters params, ElGamalPrivateKey k);
    ElGamalProofDVR constructElGamalProofDVR(ElGamalPublicKey k, ElGamalPublicKey verifierKey, ElGamalCiphertext e, ElGamalCiphertext ePrime, ElGamalReencryptFactor er, ElGamalReencryptFactor erPrime);
    ElGamalProofDVR constructFakeElGamalProofDVR(ElGamalPublicKey k, ElGamalPublicKey verifierKey, ElGamalPrivateKey verifierPrivKey, ElGamalCiphertext e, ElGamalCiphertext ePrime);
    PETShare constructPETShare(ElGamalParameters params, ElGamalCiphertext a, ElGamalCiphertext b);
    ElGamalCiphertext{*lbl} combinePETShareDecommitments(label lbl, PETDecommitment{*lbl}[]{*lbl} decs, ElGamalParameters params):{*lbl} throws CryptoException;
     /** returns true iff the ElGamalMessage resulting from the PET says the plain texts are equivalent */
    boolean petResult(ElGamalMsg petResult);

    VoteCapabilityShare generateVoteCapabilityShare(ElGamalParameters params);
    VoteCapability{*lbl}[] combineVoteCapabilityShares(elabel lbl, VoteCapabilityShare{*lbl}[][] shares, ElGamalParameters params);
    ElGamalCiphertext{*lbl}[] multiplyCiphertexts(label lbl, ElGamalSignedCiphertext{*lbl}[][] shares, ElGamalParameters params);

    ElGamalCiphertext{*lbl} const[] constructWellKnownCiphertexts(label{*lbl} lbl, ElGamalPublicKey{*lbl} key, int{*lbl} count);

    ElGamalDecryptionShare constructDecryptionShare(label{*lbl} lbl, label{*lbl} lbl2, ElGamalCiphertext{*lbl2} c, ElGamalKeyPairShare{*lbl} keyShare) where {*lbl2} <= {*lbl};
    ElGamalMsg{*lbl;shares} combineDecryptionShares(label{*lbl} lbl, ElGamalCiphertext c, ElGamalDecryptionShare{*lbl}[] shares, ElGamalParameters params) throws (CryptoException{*lbl; shares});

    ElGamal1OfLReencryption{*lbl} elGamal1OfLReencrypt(label{*lbl} lbl, ElGamalPublicKey{*lbl} key, ElGamalCiphertext{*lbl} const[]{*lbl} ciphertexts, int{*lbl} L, int{*lbl} choice, ElGamalReencryptFactor{*lbl} reencryptFactor);
    int elGamal1OfLValue(ElGamalMsg m, int L, ElGamalParameters params) throws CryptoException;

    ProofVote constructProofVote(ElGamalParameters params, ElGamalCiphertext encCapability, ElGamal1OfLReencryption encChoice, String context, ElGamalReencryptFactor encCapabilityFactor, ElGamalReencryptFactor encChoiceFactor);


    /*
     * Public Key and shared key encryption
     */
    PublicKeyCiphertext publicKeyEncrypt(PublicKey key, PublicKeyMsg msg);
    PublicKeyMsg publicKeyDecrypt(PrivateKey key, PublicKeyCiphertext ciphertext) throws (CryptoException{key;ciphertext});
    SharedKeyCiphertext sharedKeyEncrypt(SharedKey key, SharedKeyMsg msg);
    SharedKeyMsg sharedKeyDecrypt(SharedKey key, SharedKeyCiphertext ciphertext) throws (CryptoException{key;ciphertext});
    SharedKey generateSharedKey(int keyLength);

    /* hashing and nonces
     * Note that we assume the digest does not reveal any information about
     * the data used to produce the digest.
     */
    byte{*lbl; bitlength} const [] freshNonce(label{*lbl} lbl, int bitlength);
    MessageDigest[lbl] messageDigest(label lbl);
    byte{this meet *lbl}const[]{*lbl} messageDigest(label{*lbl} lbl, byte{*lbl}[]{*lbl} a, int{*lbl} b);
    byte{this meet *lbl}const[]{*lbl} messageDigest(label{*lbl} lbl, byte{*lbl}[]{*lbl} a);
    byte{this meet *lbl}const[]{*lbl} messageDigest(label{*lbl} lbl, byte{*lbl}const[]{*lbl} a, int{*lbl} b, boolean constBytes);
    byte{this meet *lbl}const[]{*lbl} messageDigest(label{*lbl} lbl, byte{*lbl}const[]{*lbl} a, boolean constBytes);
    byte{this meet *lbl}const[]{*lbl2} messageDigest(label{*lbl2} lbl, label{*lbl2} lbl2, byte{*lbl}const[]{*lbl2} a, int{*lbl2} b, boolean constBytes);
    byte{this meet *lbl}const[]{*lbl2} messageDigest(label{*lbl2} lbl, label{*lbl2} lbl2, byte{*lbl}const[]{*lbl2} a, boolean constBytes);
    byte{s}const[] messageDigest(String s);

    /*
     * Base64 methods
     */
    String{*lbl; bitlength} freshNonceBase64(label{*lbl} lbl, int bitlength);
    String{*lbl} bytesToBase64(label{*lbl} lbl, byte{*lbl}[]{*lbl} a);
    String{*lbl} constBytesToBase64(label{*lbl} lbl, byte{*lbl} const[]{*lbl} a);

    /*
     * Randomness
     */

    /**
     * Return a non-negative int less than n. n must be a positive integer.
     */
    int randomInt(int n);

    /*
     * Public key signing operations
     */
    Signature signature(PrivateKey k, PublicKeyMsg m);
    boolean publicKeyVerifySignature(PublicKey K, Signature s, PublicKeyMsg m);
    PublicKeyMsg publicKeyVerifySignatureMsg(PublicKey K, Signature s, PublicKeyMsg m);
    Signature{k;*lbl} signature(PrivateKey k, label lbl, byte{*lbl}const[]{*lbl} bytes);
    boolean{K;s;*lbl} publicKeyVerifySignature(PublicKey K, Signature s, label lbl, byte{*lbl}const[]{*lbl} bytes);
    boolean{K;s;bytes;this} publicKeyVerifySignature(PublicKey K, Signature s, byte{this}const[] bytes);
    /*
     * XML parsing methods
     */
    ElGamalPublicKey{*lbl} elGamalPublicKeyFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalPrivateKey{*lbl} elGamalPrivateKeyFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalParameters{*lbl} elGamalParametersFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalProofKnowDiscLog{*lbl} elGamalProofKnowDiscLogFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalProofDiscLogEquality{*lbl} elGamalProofDiscLogEqualityFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalCiphertext{*lbl} elGamalCiphertextFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalSignedCiphertext{*lbl} elGamalSignedCiphertextFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalDecryptionShare{*lbl} decryptionShareFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PETCommitment{*lbl} petCommitmentFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PETDecommitment{*lbl} petDecommitmentFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalKeyShare{*lbl} elGamalKeyShareFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamal1OfLReencryption{*lbl} elGamal1OfLReencryptionFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalProof1OfL{*lbl} elGamalProof1OfLFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalReencryptFactor{*lbl} elGamalReencryptFactorFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PrivateKey{*lbl} privateKeyFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PublicKeyCiphertext{*lbl} publicKeyCiphertextFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    SharedKeyCiphertext{*lbl} sharedKeyCiphertextFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    SharedKey{*lbl} sharedKeyFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    SharedKey{*lbl} sharedKeyFromWire{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ElGamalProofDVR{*lbl} elGamalProofDVRFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    VoteCapability{*lbl} voteCapabilityFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    VoteCapabilityShare{*lbl} voteCapabilityShareFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PublicKey{*lbl} publicKeyFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    Signature{*lbl} signatureFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    ProofVote{*lbl} proofVoteFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});
    PETShare{*lbl} petShareFromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl});

    /*
     * Factory methods
     */
    ElGamalMsg{m} elGamalMsg(int m, ElGamalParameters p) throws (CryptoException{m;p});
    ElGamalMsg{m} elGamalMsg(String m, ElGamalParameters p) throws (CryptoException{m;p});
    ElGamalKeyShare elGamalKeyShare(ElGamalPublicKey K, ElGamalProofKnowDiscLog proof);
    PublicKeyMsg{m} publicKeyMsg(String m) throws (CryptoException{m});
    SharedKeyMsg{m} sharedKeyMsg(String m) throws (CryptoException{m});

}