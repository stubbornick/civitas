/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.io.*;
import civitas.crypto.*;

/**
 * The unique identifier of a host, such as a tab teller,
 * a registration teller, or a bulletin board. It consists
 * of the address, port, and public key of the host.
 */
public class Host implements XMLSerializable {
    public final String{this} address;
    public final int{this} port;
    public final PublicKey{this} publicKey;

    public Host(String{this} address, int{this} port, PublicKey{this} publicKey) {
        this.address = address;
        this.port = port;
        this.publicKey = publicKey;
    }

    public String{this} toString() {
        String s = this.address;
        s += ":";
        s += this.port;
        return s;
    }

    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<host>");

        sb.print("<address>");
        Util.escapeString(this.address, lbl, sb);
        sb.print("</address>");
        sb.print("<port>");
        sb.print(this.port);
        sb.print("</port>");
        if (this.publicKey != null) {
            this.publicKey.toXML(lbl, sb);
        }

        sb.print("</host>");
    }

    public static Host{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        Util.swallowTag(lbl, r, "host");
        String address = Util.unescapeString(Util.readSimpleTag(lbl, r, "address"));
        int port = Util.readSimpleIntTag(lbl, r, "port");
        PublicKey publicKey = null;
        if (Util.isNextTag(lbl, r, PublicKey.OPENING_TAG)) {
            try {
                publicKey = CryptoUtil.factory().publicKeyFromXML(lbl, r);
            }
            catch (NullPointerException imposs) { }
        }
        Util.swallowEndTag(lbl, r, "host");
        return new Host(address, port, publicKey);
    }
}