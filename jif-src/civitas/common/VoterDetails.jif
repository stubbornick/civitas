/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import java.io.*;

/**
 * Details of an individual voter. Details include the voter's name (a 
 * string uniquely identifying the voter), an ElGamal public key,
 * an RSA public key, and the block the voter belongs in.
 */
public class VoterDetails implements XMLSerializable {
    public static final String{*<-*} OPENING_TAG = "voterDetails";
    
    /**
     * The name of the voter, which must be unique.
     */
    public final String{this} name;
    
    /**
     * The voter's El Gamal public key
     */
    public final ElGamalPublicKey{this} egPublicKey;
    
    /**
     * The voter's other public key
     */
    public final PublicKey{this} publicKey;
    
    /**
     * The voter's block.
     *
     */
    public final int{this} voterBlock;
    
    public VoterDetails(String{this} name, ElGamalPublicKey{this} egPublicKey, PublicKey{this} publicKey, int{this} voterBlock) {
        this.name = name;
        this.egPublicKey = egPublicKey;
        this.publicKey = publicKey;
        this.voterBlock = voterBlock;
    }
            
    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");

        sb.print("<name>");
        Util.escapeString(this.name, lbl, sb);
        sb.print("</name>");
        if (egPublicKey != null) egPublicKey.toXML(lbl, sb);
        if (publicKey != null) publicKey.toXML(lbl, sb);
        sb.print("<block>");
        sb.print(this.voterBlock);
        sb.print("</block>");
        sb.print("</" + OPENING_TAG + ">");
    }
    
    public static VoterDetails fromXML{}(Reader[{}]{} r) throws (IllegalArgumentException{}, IOException{}) {
        final label lbl = new label {};
        Util.swallowTag(lbl, r, OPENING_TAG);
        String name = Util.unescapeString(Util.readSimpleTag(lbl, r, "name"));
        ElGamalPublicKey egPublicKey = null;
        if (Util.isNextTag(lbl, r, ElGamalPublicKey.EG_OPENING_TAG)) {
            try {
                egPublicKey = CryptoUtil.factory().elGamalPublicKeyFromXML(lbl, r);
            }
            catch (NullPointerException imposs) { }
        }
        PublicKey publicKey = null;
        if (Util.isNextTag(lbl, r, PublicKey.OPENING_TAG)) {
            try {
                publicKey = CryptoUtil.factory().publicKeyFromXML(lbl, r);
            }
            catch (NullPointerException imposs) { }
        }
        
        int voterBlock = Util.readSimpleIntTag(lbl, r, "block");
        Util.swallowEndTag(lbl, r, OPENING_TAG);
        return new VoterDetails(name, egPublicKey, publicKey, voterBlock);
    }    
}