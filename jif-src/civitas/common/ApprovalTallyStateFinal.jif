/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.util.*;
import java.io.*;

/**
 * TallyStateFinal for a ApprovalBallotDesign.
 */
public class ApprovalTallyStateFinal extends TallyStateFinal {
    public final String{this} const[]{this} candidates;
    private final int{this} const[]{this} approvals;
    private final int{this} const[]{this} disapprovals;

    ApprovalTallyStateFinal(label lbl,
                            String{this} const[]{this} candidates,
                            int{*lbl}[]{*lbl} approvals,
                            int{*lbl}[]{*lbl} disapprovals)
    where {*lbl} <= {this} {
        int{this} const[] as = null;
        int{this} const[] ds = null;
        if (approvals != null) as = approvals.clone();
        if (disapprovals != null) ds = disapprovals.clone();
        this.approvals = as;
        this.disapprovals = ds;
        this.candidates = candidates;
        super();
    }

    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<kind>");
        sb.print(ApprovalBallotDesign.KIND);
        sb.print("</kind>");
        sb.print("<count>");
        sb.print(candidates == null ? 0 : candidates.length);
        sb.print("</count>");

        sb.print("<approvalCounts>");
        for (int i = 0; candidates != null && i < candidates.length; i++) {
            sb.print("<candidate>");
            try {
                sb.print("<name>");
                sb.print(candidates[i]);
                sb.print("</name>");
                sb.print("<approvals>");
                sb.print(approvals[i]);
                sb.print("</approvals>");
                sb.print("<disapprovals>");
                sb.print(disapprovals[i]);
                sb.print("</disapprovals>");
            }
            catch (NullPointerException imposs) { }
            catch (ArrayIndexOutOfBoundsException imposs) { }
            sb.print("</candidate>");
        }
        sb.print("</approvalCounts>");
        sb.print("</" + OPENING_TAG + ">");
    }

    public static TallyStateFinal{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        int count = Util.readSimpleIntTag(lbl, r, "count");

        String{*lbl}[] candidates = new String[count<0?0:count];
        int{*lbl}[] approvals = new int[count<0?0:count];
        int{*lbl}[] disapprovals = new int[count<0?0:count];

        Util.swallowTag(lbl, r, "approvalCounts");
        for (int i = 0; i < count; i++) {
            Util.swallowTag(lbl, r, "candidate");
            try {
                candidates[i] = Util.readSimpleTag(lbl, r, "name");
                approvals[i] = Util.readSimpleIntTag(lbl, r, "approvals");
                disapprovals[i] = Util.readSimpleIntTag(lbl, r, "disapprovals");
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
            catch (NullPointerException imposs) { }
            Util.swallowEndTag(lbl, r, "candidate");
        }

        Util.swallowEndTag(lbl, r, "approvalCounts");
        ApprovalTallyStateFinal b = new ApprovalTallyStateFinal(lbl, candidates.clone(), approvals, disapprovals);

        return b;
     }
}