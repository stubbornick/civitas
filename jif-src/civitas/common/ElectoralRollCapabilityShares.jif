/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import java.io.*;

/**
 * Encrypted capability shares for all voters. This data structure is produced
 * by each registration teller at the start of registration. Each registration
 * teller produces capability shares for each voter, and posts encryptions
 * of these shares to the bulletin board. 
 */
public class ElectoralRollCapabilityShares implements XMLSerializable {
    private final static String{*<-*} META = "electoralRollCapShares";
    public static final String{*<-*} OPENING_TAG = "electoralRollCapShares";
    
    public static String meta(int tellerIndex, int voterBlock) {
        return META+":teller:"+tellerIndex+":voterBlock:"+voterBlock;
    }
    // an array of voter capabilities
    public final VoterEncCapabilityShares{}[]{this} roll;
    
    /**
     * Which registration teller created these capabilities
     */
    public final int{this} tellerIndex;

    /**
     * Which voter block do these voters belong to
     */
    public final int{this} voterBlock;

    public ElectoralRollCapabilityShares(VoterEncCapabilityShares{}[]{this} roll, int{this} tellerIndex, int{this} voterBlock) {
        this.roll = roll;
        this.tellerIndex = tellerIndex;
        this.voterBlock = voterBlock;
    }
    
    public void toXML{}(PrintWriter[{}]{} sb) {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<teller>");
        sb.print(this.tellerIndex);
        sb.print("</teller>");
        sb.print("<voterBlock>");
        sb.print(this.voterBlock);
        sb.print("</voterBlock>");

        if (this.roll != null) {
            sb.print("<size>");
            sb.print(this.roll.length);
            sb.print("</size>");
            for (int i = 0; i < roll.length; i++) {
                try {
                    VoterEncCapabilityShares c = roll[i];
                    if (c != null) {
                        c.toXML(sb);
                    }
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }
        else {
            sb.print("<size>0</size>");                        
        }
        
        sb.print("</" + OPENING_TAG + ">");
    }
    
    public static ElectoralRollCapabilityShares fromXML{}(Reader[{}]{} r) throws (IllegalArgumentException{}, IOException{}) {
        final label lbl = new label {};
        Util.swallowTag(lbl, r, OPENING_TAG);
        
        int tellerIndex = Util.readSimpleIntTag(lbl, r, "teller");
        int voterBlock = Util.readSimpleIntTag(lbl, r, "voterBlock");
        int size = Util.readSimpleIntTag(lbl, r, "size");
        VoterEncCapabilityShares{}[] roll = new VoterEncCapabilityShares[size<0?0:size];
        for (int i = 0; i < size; i++) {
            VoterEncCapabilityShares c = VoterEncCapabilityShares.fromXML(r);
            try {
                roll[i] = c;
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

                
        Util.swallowEndTag(lbl, r, OPENING_TAG);
        return new ElectoralRollCapabilityShares(roll, tellerIndex, voterBlock);
    }    
}