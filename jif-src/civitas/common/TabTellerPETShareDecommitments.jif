/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import java.io.*;

/**
 * A teller's shares of Plaintext Equivalence Test (PET) decommitments.
 */
public class TabTellerPETShareDecommitments implements XMLSerializable {
    public final static String{*<-*} META_PREFIX = "ttPETShareDecommits:";

    public final int{this} tellerIndex;
    
    // an array of the decommitments
    public final PETDecommitment{}[]{this} decommitments;
    
    // an array of the proofs
    public final ElGamalProofDiscLogEquality{}[]{this} proofs;

    public TabTellerPETShareDecommitments(int{this} tellerIndex, PETDecommitment{}[]{this} decommitments, ElGamalProofDiscLogEquality{}[]{this} proofs) {
        this.tellerIndex = tellerIndex;
        this.decommitments = decommitments;
        this.proofs = proofs;
    }
    
    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this; _!:_ ; _:_} <= lbl  {
        if (sb == null) return;
        sb.print("<tabTellerPETShareDecommitments>");

        sb.print("<index>");
        sb.print(this.tellerIndex);
        sb.print("</index>");
        if (this.decommitments != null) {
            sb.print("<size>");
            sb.print(this.decommitments.length);
            sb.print("</size>");
            for (int i = 0; i < decommitments.length; i++) {
                try {
                    PETDecommitment c = decommitments[i];
                    if (c != null) {
                        c.toXML(lbl, sb);
                    }
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }
        else {
            sb.print("<size>0</size>");
        }
        
        if (this.proofs != null) {
            for (int i = 0; i < proofs.length; i++) {
                try {
                    ElGamalProofDiscLogEquality p = proofs[i];
                    if (p != null) {
                        p.toXML(lbl, sb);
                    }
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }

        sb.print("</tabTellerPETShareDecommitments>");
    }
    
    public static TabTellerPETShareDecommitments fromXML{}(Reader[{}]{} r) throws (IllegalArgumentException{}, IOException{}) {
        final label lbl = new label {};
        Util.swallowTag(lbl, r, "tabTellerPETShareDecommitments");
        int index = Util.readSimpleIntTag(lbl, r, "index");
        int size = Util.readSimpleIntTag(lbl, r, "size");
        PETDecommitment{}[] decommitments = new PETDecommitment[size<0?0:size];
        for (int i = 0; i < size; i++) {
            PETDecommitment c = null;
            try {
                c = CryptoUtil.factory().petDecommitmentFromXML(lbl, r);
            }
            catch (NullPointerException{} imposs) { }
            try {
                decommitments[i] = c;
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

        
        // read in the proofs.
        ElGamalProofDiscLogEquality{}[] proofs = new ElGamalProofDiscLogEquality[size<0?0:size];
        for (int i =0; i < size; i++) {
            try {
                ElGamalProofDiscLogEquality c = CryptoUtil.factory().elGamalProofDiscLogEqualityFromXML(lbl, r);
                proofs[i] = c;
            }
            catch (NullPointerException imposs) { }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }
        
        Util.swallowEndTag(lbl, r, "tabTellerPETShareDecommitments");
        return new TabTellerPETShareDecommitments(index, decommitments, proofs);
    }    
}