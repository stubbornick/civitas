/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.io.*;

/**
 * This class lists the BoardClosedContentCommitments that
 * are approved for tabulation. A BoardsForTabulation message is
 * posted by the election supervisor at the start of tabulation,
 * to indicate to the tabulation teller what ballot boxes
 * are to be used for tabulation.
 * (Note: Voter ballot boxes were previously known as voter bulletin boards,
 * hence the name of this class.)
 */
public class BoardsForTabulation implements XMLSerializable {
    public final BoardClosedContentCommitment{this} const[]{this} contentComs;

    public static final String{*<-*} META = "boardsForTabulation";
    public static final String{*<-*} OPENING_TAG = "boardsForTabulation";

    public BoardsForTabulation(label lbl,
            BoardClosedContentCommitment{*lbl}[]{*lbl} contentComs) where {*lbl} <= {this} {
        BoardClosedContentCommitment{this} const[]{this} cc = null;
        if (contentComs != null) {
            cc = contentComs.clone();
        }

        this.contentComs = cc;
    }

    public BoardClosedContentCommitment contentCommitmentForBoard(int boardIndex) {
        if (contentComs == null) return null;
        for (int i = 0; i < contentComs.length; i++) {
            try {
                BoardClosedContentCommitment cc = contentComs[i];
                if (cc != null && cc.boardIndex == boardIndex) {
                    return cc;
                }
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }
        return null;
    }

    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");

        if (this.contentComs != null) {
            sb.print("<size>");
            sb.print(this.contentComs.length);
            sb.print("</size>");
        }
        else {
            sb.print("<size>0</size>");
        }
        sb.print("<contentComs>");
        try {
            for (int i = 0; i < contentComs.length; i++) {
                contentComs[i].toXML(lbl, sb);
            }
        }
        catch (NullPointerException imposs) { }
        catch (ArrayIndexOutOfBoundsException imposs) { }
        sb.print("</contentComs>");
        sb.print("</" + OPENING_TAG + ">");
    }


    public static BoardsForTabulation{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        Util.swallowTag(lbl, r, OPENING_TAG);

        int ccSize = Util.readSimpleIntTag(lbl, r, "size");
        BoardClosedContentCommitment{*lbl}[] n = new BoardClosedContentCommitment[ccSize<0?0:ccSize];
        Util.swallowTag(lbl, r, "contentComs");
        for (int i = 0; i < ccSize; i++) {
            try {
                n[i] = BoardClosedContentCommitment.fromXML(lbl, r);
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }
        Util.swallowEndTag(lbl, r, "contentComs");

        Util.swallowEndTag(lbl, r, OPENING_TAG);

        BoardsForTabulation bt = new BoardsForTabulation(lbl, n);
        return bt;
    }
}