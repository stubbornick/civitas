/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.io.*;

/**
 * A Ballot is a representation of a voter's intentions. For example,
 * in a "single choice" race, there is a slate of candidates, of which
 * the voter may choose one; a ballot for a single choice race (a
 * SingleChoiceBallot) records which candidate the voter chose.
 * A ballot is decomposed into <code>Vote</code>s, which the voter
 * submits to the bulletin board, and which are used in the tabulation
 * protocols.
 */
public abstract class Ballot[label L] {
    public abstract void toXML{L}(PrintWriter[L]{L} sb);
    public final static String{*<-*} OPENING_TAG = "ballot";

    protected Ballot() {
    }

    /**
     * Produce an appropriate Ballot from an XML representation. The super class needs
     * to know about all subclasses.
     */
    public static Ballot[lbl] fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        Ballot[lbl] b = null;
        Util.swallowTag(lbl, r, OPENING_TAG);
        String kind = Util.unescapeString(Util.readSimpleTag(lbl, r, "kind"));
        if (kind == null) {
            throw new IOException("Unspecified kind");
        }
        else if (kind.equalsIgnoreCase(ApprovalBallotDesign.KIND)) {
            b = ApprovalBallot[lbl].fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(SingleChoiceBallotDesign.KIND)) {
            b = SingleChoiceBallot[lbl].fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(CondorcetBallotDesign.KIND)) {
            b = CondorcetBallot[lbl].fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(MultiBallotDesign.KIND)) {
            b = MultiBallot[lbl].fromXML(lbl, r);
        }
       else
            throw new IOException("Unknown ballot kind: " + kind);
        Util.swallowEndTag(lbl, r, OPENING_TAG);
        return b;
    }
}