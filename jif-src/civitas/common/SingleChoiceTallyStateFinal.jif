/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.util.*;
import java.io.*;

/**
 * TallyStateFinal for a SingleChoiceballotDesign.
 */
public class SingleChoiceTallyStateFinal extends TallyStateFinal {
    public final int{this} const[]{this} counts;
    public final String{this} const[]{this} candidates;

    SingleChoiceTallyStateFinal(label lbl, String{this} const[]{this} candidates, int{*lbl}[]{*lbl} counts)
    where {*lbl} <= {this} {
        int{this} const[] cs = null;
        if (counts != null) cs = counts.clone();
        this.counts = cs;
        this.candidates = candidates;
        super();
    }

    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<kind>");
        sb.print(SingleChoiceBallotDesign.KIND);
        sb.print("</kind>");
        sb.print("<count>");
        sb.print(counts == null ? 0 : counts.length);
        sb.print("</count>");

        sb.print("<candidateCounts>");
        try {
            for (int i = 0; i < counts.length; i++) {
                sb.print("<candidate>");
                sb.print("<name>");
                sb.print(candidates[i]);
                sb.print("</name>");
                sb.print("<tally>");
                sb.print(counts[i]);
                sb.print("</tally>");
                sb.print("</candidate>");
            }
        }
        catch (NullPointerException imposs) { }
        catch (ArrayIndexOutOfBoundsException imposs) { }
        sb.print("</candidateCounts>");
        sb.print("</" + OPENING_TAG + ">");
    }

    public static TallyStateFinal{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        int count = Util.readSimpleIntTag(lbl, r, "count");

        String{*lbl}[] candidates = new String[count<0 ? 0 : count];
        int{*lbl}[] counts = new int[count<0 ? 0 : count];

        Util.swallowTag(lbl, r,  "candidateCounts");
        for (int i = 0; i < count; i++) {
            try {
                Util.swallowTag(lbl, r,  "candidate");
                candidates[i] = Util.readSimpleTag(lbl, r,  "name");
                counts[i] = Util.readSimpleIntTag(lbl, r,  "tally");
                Util.swallowEndTag(lbl, r,  "candidate");
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
            catch (NullPointerException imposs) { }
        }

        Util.swallowEndTag(lbl, r,  "candidateCounts");
        SingleChoiceTallyStateFinal b = new SingleChoiceTallyStateFinal(lbl, candidates.clone(), counts);
        return b;
     }
}