/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import civitas.crypto.*;

import java.io.*;

/**
 * A ciphertext list is just a list of ciphertexts.
 */
public class CiphertextList implements XMLSerializable {
    public final static String{*<-*} META = "ciphertextList";

    public final ElGamalCiphertext{this} const[]{this} ciphertexts;
    public CiphertextList(label lbl, ElGamalCiphertext{*lbl}[]{*lbl} ciphertexts) where {*lbl} <= {this} {
        ElGamalCiphertext{this} const[]{this} cs;
        if (ciphertexts != null) {
            cs = ciphertexts.clone();
        }
        else {
            cs = new ElGamalCiphertext[0];
        }
        this.ciphertexts = cs;
    }
    public CiphertextList(label lbl, ElGamalCiphertext{*lbl} const []{*lbl} ciphertexts, boolean dummy) where {*lbl} <= {this} {
        this.ciphertexts = ciphertexts;
    }

    public ElGamalCiphertext{this;i} get(int i) throws (IndexOutOfBoundsException{this;i}) {
        try {
            return ciphertexts[i];
        }
        catch (NullPointerException e) {
            throw new IndexOutOfBoundsException();
        }
    }
    public int{this} size() {
        return ciphertexts == null ? 0 : ciphertexts.length;
    }

    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<ciphertextList>");
        sb.print("<size>");
        sb.print(ciphertexts == null?0:ciphertexts.length);
        sb.print("</size>");
        try {
            for (int i = 0; i < ciphertexts.length; i++) {
                ciphertexts[i].toXML(lbl, sb);
            }
        }
        catch (NullPointerException imposs) { }
        catch (ArrayIndexOutOfBoundsException imposs) { }
        sb.print("</ciphertextList>");
    }

    public static CiphertextList{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {

        Util.swallowTag(lbl, r, "ciphertextList");
        int size =Util.readSimpleIntTag(lbl, r, "size");
        ElGamalCiphertext{*lbl}[] ciphertexts = new ElGamalCiphertext[size<0?0:size];

        for (int i = 0; i < ciphertexts.length; i++) {
            try {
                ciphertexts[i] = CryptoUtil.factory().elGamalCiphertextFromXML(lbl, r);
            }
            catch (NullPointerException imposs) { }
            catch (ArrayIndexOutOfBoundsException e) {
                throw new IOException("size does not agree with number of ciphertexts");
            }
        }

        Util.swallowEndTag(lbl, r, "ciphertextList");
        CiphertextList cl = new CiphertextList(lbl, ciphertexts);

        return cl;
    }
}