/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import civitas.crypto.*;
import java.io.*;

/**
 * A teller's shares of distributed decryptions.
 */
public class TabTellerDistributedDecryptions implements XMLSerializable {
    public final static String{*<-*} META_PREFIX = "ttDistDecrypt:";

    public final int{this} tellerIndex;

    // an array of the decrypts
    public final ElGamalDecryptionShare{this} const[]{this} decrypts;

    // an array of the proofs
    public final ElGamalProofDiscLogEquality{this} const[]{this} proofs;

    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public TabTellerDistributedDecryptions(label{*lbl} lbl, int{this} tellerIndex, ElGamalDecryptionShare{*lbl}[]{this} decrypts, ElGamalProofDiscLogEquality{*lbl}[]{this} proofs)
    where {*lbl} <= {this} {
        this.tellerIndex = tellerIndex;

        ElGamalDecryptionShare{this} const[]{this} ds = null;
        if (decrypts != null) {
            ds = decrypts.clone();
        }
        this.decrypts = ds;

        ElGamalProofDiscLogEquality{this} const[]{this} ps = null;
        if (proofs != null) {
            ps = proofs.clone();
        }
        this.proofs = ps;
    }

    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<tabTellerDistributedDecryptions>");

        sb.print("<index>");
        sb.print(this.tellerIndex);
        sb.print("</index>");
        if (this.decrypts != null) {
            sb.print("<size>");
            sb.print(this.decrypts.length);
            sb.print("</size>");
            for (int i = 0; i < decrypts.length; i++) {
                try {
                    ElGamalDecryptionShare c = decrypts[i];
                    if (c != null) {
                        c.toXML(lbl, sb);
                    }
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }
        else {
            sb.print("<size>0</size>");
        }

        if (this.proofs != null) {
            for (int i = 0; i < proofs.length; i++) {
                try {
                    ElGamalProofDiscLogEquality p = proofs[i];
                    if (p != null) {
                        p.toXML(lbl, sb);
                    }
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }

        sb.print("</tabTellerDistributedDecryptions>");
    }

    public static TabTellerDistributedDecryptions{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r):{*lbl} throws IllegalArgumentException, IOException {
        Util.swallowTag(lbl, r, "tabTellerDistributedDecryptions");
        int index = Util.readSimpleIntTag(lbl, r, "index");
        int size = Util.readSimpleIntTag(lbl, r, "size");

        ElGamalDecryptionShare{*lbl}[] decrypts = new ElGamalDecryptionShare[size<0?0:size];
        for (int i = 0; i < size; i++) {
            ElGamalDecryptionShare c = null;
            try {
                c = CryptoUtil.factory().decryptionShareFromXML(lbl, r);
                decrypts[i] = c;
            }
            catch (NullPointerException imposs) { }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

        // read in the proofs.
        ElGamalProofDiscLogEquality{*lbl}[] proofs = new ElGamalProofDiscLogEquality[size<0?0:size];
        for (int i = 0; i < size; i++) {
            try {
                ElGamalProofDiscLogEquality c = CryptoUtil.factory().elGamalProofDiscLogEqualityFromXML(lbl, r);
                proofs[i] = c;
            }
            catch (NullPointerException imposs) { }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

        Util.swallowEndTag(lbl, r, "tabTellerDistributedDecryptions");
        return new TabTellerDistributedDecryptions(lbl, index, decrypts, proofs);
    }
}