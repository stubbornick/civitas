/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import java.io.*;

/**
 * Associates a collection of encrypted capabilities and a 
 * voter block with a voter name. That is, for a given voter, this data structure
 * is a list of encrypted capabilities, and the block the voter belongs in.
 * This data structure created by combining a collection of VoterEncCapabilityShares 
 * objects.
 */
public class VoterEncCapabilities implements XMLSerializable {
    public static final String{*<-*} OPENING_TAG = "voterEncCapabilities";

    /**
     * The voter's name
     */
    public final String{this} name;
    
    /**
     * for the purposes of blocking, voters are divided into blocks, according
     * to the security parameters of the election details.
     */
    public final int{this} voterBlock; 
    
    //  the order of these capabilities is important: the ith capability must
    // be used for the ith context, i.e., the ith produced vote.
    public final ElGamalCiphertext{}[]{this} encCapabilities;  

    public VoterEncCapabilities(String{this} name, int{this} voterBlock, ElGamalCiphertext{}[]{this} encCapabilities) {
        this.name = name;
        this.voterBlock = voterBlock;
        this.encCapabilities = encCapabilities;
    }
            
    public void toXML{}(PrintWriter[{}]{} sb) {
        if (sb == null) return;
        final label lbl = new label {};
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<name>");
        Util.escapeString(this.name, lbl, sb);
        sb.print("</name>");
        sb.print("<voterBlock>");
        sb.print(this.voterBlock);
        sb.print("</voterBlock>");
        sb.print("<encCapabilities>");
        if (encCapabilities != null) {
            sb.print("<size>");
            sb.print(this.encCapabilities.length);
            sb.print("</size>");
            for (int i = 0; i < encCapabilities.length; i++) {
                try {
                    ElGamalCiphertext vc = encCapabilities[i];
                    if (vc != null) vc.toXML(lbl, sb);
                }
                catch (ArrayIndexOutOfBoundsException imposs) { }
            }
        }
        else {
            sb.print("<size>0</size>");
            
        }
        sb.print("</encCapabilities>");
        
        sb.print("</" + OPENING_TAG + ">");
    }
    
    public static VoterEncCapabilities fromXML{}(Reader[{}]{} r) throws (IllegalArgumentException{}, IOException{}) {
        final label lbl = new label {};
        Util.swallowTag(lbl, r, OPENING_TAG);
        String name = Util.unescapeString(Util.readSimpleTag(lbl, r, "name"));

        int voterBlock = Util.readSimpleIntTag(lbl, r, "voterBlock");

        Util.swallowTag(lbl, r, "encCapabilities");
        int size = Util.readSimpleIntTag(lbl, r, "size");
        ElGamalCiphertext{}[] caps = new ElGamalCiphertext[size<0?0:size];
        for (int i = 0; i < size; i++) {
            ElGamalCiphertext c = null;
            try {
                c = CryptoUtil.factory().elGamalCiphertextFromXML(lbl, r);
            }
            catch (NullPointerException{} imposs) { }
            try {
                caps[i] = c;
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

        Util.swallowEndTag(lbl, r, "encCapabilities");

        
        Util.swallowEndTag(lbl, r, OPENING_TAG);
        return new VoterEncCapabilities(name, voterBlock, caps);
    }    
}