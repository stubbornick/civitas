/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import jif.util.*;
import java.io.*;
import java.math.BigInteger;

/**
 * This class is the ballot design of a single choice race. In a single choice 
 * race, there is a slate of candidates, and the voter selects one candidate. 
 * A SingleChoiceBallotDesign describes the candidates in the race.
 */
public class SingleChoiceBallotDesign extends BallotDesign {
    public static final String{*<-*} KIND = "singleChoice";

    public final String{this} const[]{this} candidates;
    public SingleChoiceBallotDesign{*lbl}(label lbl, String{*lbl}[]{*lbl} candidates) where {*lbl} <= {this} {
        String{this} const[]{this} cs;
        if (candidates != null) {
            cs = candidates.clone();
        }
        else {
            cs = new String[0];
        }
        this.candidates = cs;
        super();
    }
    
    /**
     * Return the index of the candidate cand, -1 if cand is not a candidate.
     */
    public int{cand} indexOfCandidate(String cand) {
        if (candidates == null) return -1;
        for (int i = 0; i < candidates.length; i++) {
            try {
                String cD = candidates[i];
                if (cD == cand || (cD != null && cD.equalsIgnoreCase(cand))) {
                    return i;
                }
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }        
        return -1;
    }
    
    public int{this} numberOfCandidates() {
        if (candidates == null) return 0;
        return candidates.length;
    }
    
    public void checkBallot{*lbl}(label{*lbl} lbl, Ballot[lbl]{*lbl} b) throws (IllegalArgumentException{*lbl}) {
        if (!(b instanceof SingleChoiceBallot[lbl])) {
            throw new IllegalArgumentException("Ballot is not a single choice ballot.");
        }
        
        SingleChoiceBallot[lbl] scb = (SingleChoiceBallot[lbl]) b;
        
        if (candidates == null) {
            throw new IllegalArgumentException("Missing slate.");
        }
        
        if (indexOfCandidate(scb.candidate) < 0) {
            throw new IllegalArgumentException("No valid candidate selected");              
        }
    }

    private static final String{*!:} CONTEXT_SUFFIX = "single";
    public int{this} votesProducedPerBallot() {
        // a single vote only is produced by the decompose method.
        return 1;
    }
    public int{this} maxPossibleChoices() {
        return numberOfCandidates();
    }
    

    public VoterSubmission{*lbl} decompose{*lbl}(label{*lbl} lbl, Ballot[lbl]{*lbl} ballot, int{*lbl} voterBlock, 
            ElGamalPublicKey{*lbl} key, 
            ElGamalCiphertext{*lbl}const[]{*lbl} ciphertexts,
            String{*lbl} context, 
            Map[lbl,lbl]{*lbl} capabilities) throws (IllegalArgumentException{*lbl}) 
            {
        // the decomposition is just a single vote! very straightforward...
        
        // convert the candidate name into an index...
        int choice = -1;
        if (ballot instanceof SingleChoiceBallot[lbl]) {
            SingleChoiceBallot[lbl] scb = (SingleChoiceBallot[lbl])ballot;
            choice = this.indexOfCandidate(scb.candidate);
        }
        if (choice == -1) throw new IllegalArgumentException("Trying to decompose a bad choice!");
        if (key == null) {
            throw new IllegalArgumentException("No key supplied");            
        }
        
        ElGamalReencryptFactor encChoiceFactor = null;
        ElGamal1OfLReencryption encChoice = null;
        try {
            encChoiceFactor = CryptoUtil.factory().generateElGamalReencryptFactor(key.getParams());
            encChoice = CryptoUtil.factory().elGamal1OfLReencrypt(lbl, key, ciphertexts, numberOfCandidates(), choice, encChoiceFactor);
        }
        catch (NullPointerException imposs) { }

        String desiredContext = context+CONTEXT_SUFFIX;
        VoteCapability c = null;
        try {
            c = (VoteCapability)(((JifObjectWrapper[lbl])capabilities.get(desiredContext)).obj);
        }
        catch (NullPointerException e) {
            throw new IllegalArgumentException("Not enough capabilities supplied");
        }
        catch (ClassCastException e) {
            throw new IllegalArgumentException("Not enough capabilities supplied");
        }
        if (c == null) {
            throw new IllegalArgumentException("No capability supplied for context " + desiredContext);                
        }
        
        ElGamalReencryptFactor encCapFactor = null;
        ElGamalCiphertext encCap = null;
        ProofVote proofVote = null;
        try {
            encCapFactor = CryptoUtil.factory().generateElGamalReencryptFactor(key.getParams());
            encCap = CryptoUtil.factory().elGamalEncrypt(key, c, encCapFactor);
            proofVote = CryptoUtil.factory().constructProofVote(key.getParams(), encCap, encChoice, desiredContext, encCapFactor, encChoiceFactor);
        }
        catch (NullPointerException imposs) { }

        VerifiableVote v = new VerifiableVote(desiredContext, encChoice, encCap, proofVote);
        
        VoterSubmission vs = new VoterSubmission(lbl, voterBlock, new VerifiableVote[] {v});        
        return vs;
    }
    
    /**
     * To check a single choice voter submission, we check that the context
     * is correct.
     */
    public void checkVoterSubmission(VoterSubmission vs, int startIndex, String context, CiphertextList ciphertexts, ElGamalPublicKey pubKey) 
    throws (IllegalArgumentException{this;vs;startIndex;context;ciphertexts;pubKey}) {
        try {
            if (pubKey == null) {
                throw new IllegalArgumentException("Invalid public Key");                        
            }
            VerifiableVote vv = vs.votes[startIndex];
            String vvcontext = vv.context;
            String desiredContext = (context==null?"":context) + CONTEXT_SUFFIX;
            if (!desiredContext.equals(vvcontext)) {
                throw new IllegalArgumentException("Vote did not have correct context");                
            }
            
            if (!vv.verify(pubKey, ciphertexts, maxPossibleChoices())) {
                throw new IllegalArgumentException("Vote choice does not pass verification.");                
            }

            return;
        }
        catch (NullPointerException e) { }
        catch (ArrayIndexOutOfBoundsException e) { }
        throw new IllegalArgumentException("No approriate vote for single choice ballot");
        
    }

    public void contextsNeeded{*lbl}(label{*lbl} lbl, List[lbl]{*lbl} l, String{*lbl} context) throws (IllegalArgumentException{*lbl}) {
        if (l == null) return;
        try {
            l.add((context==null?"":context) + CONTEXT_SUFFIX);
        }
        catch (ClassCastException unlikely) { }

    }
    
    public String nthContext(int n) {
        if (n == 0) return CONTEXT_SUFFIX;
        return null;
    }

    public void tally{*lbl}(label{*lbl} lbl, String{*lbl} ctxt, ElGamalMsg{*lbl} m, String{*lbl} c, TallyState[lbl]{*lbl} s, ElGamalParameters{*lbl} params) throws (IllegalArgumentException{*lbl}) {
        if (!(s instanceof SingleChoiceTallyState[lbl])) {
            throw new IllegalArgumentException("Incorrect tally state");
        }
        SingleChoiceTallyState[lbl] scts = (SingleChoiceTallyState[lbl])s;
        
        String desiredContext = (ctxt==null?"":ctxt) + CONTEXT_SUFFIX;
        if (desiredContext == null || !desiredContext.equals(c)) {
            throw new IllegalArgumentException("Incorrect context");
        }
        if (m == null) {
            throw new IllegalArgumentException("Null message");
        }
        try {
            scts.increment(CryptoUtil.factory().elGamal1OfLValue(m, numberOfCandidates(), params));
        }
        catch (CryptoException e) {
            throw new IllegalArgumentException("Invalid vote value");
        }
        catch (IndexOutOfBoundsException e) {
            throw new IllegalArgumentException("Invalid index");
        }
        catch (NullPointerException imposs) {
            throw new IllegalArgumentException("impossible!");
        }
        
    }
    
    public TallyState[lbl]{*lbl2} newTallyState{*lbl2}(label{*lbl2} lbl, label{*lbl2} lbl2) where lbl2 <= lbl  {
        return new SingleChoiceTallyState[lbl](candidates);
    }

    
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<kind>");
        sb.print(SingleChoiceBallotDesign.KIND);
        sb.print("</kind>");
        if (this.candidates != null) {
            sb.print("<size>");
            sb.print(this.candidates.length);
            sb.print("</size>");
        }
        else {
            sb.print("<size>0</size>");            
        }
        sb.print("<candidates>");
        try {
            for (int i = 0; i < candidates.length; i++) {
                sb.print("<candidate>");
                Util.escapeString(candidates[i], lbl, sb);
                sb.print("</candidate>");
            }        
        }
        catch (NullPointerException imposs) { }
        catch (ArrayIndexOutOfBoundsException imposs) { }
        sb.print("</candidates>");
        sb.print("</" + OPENING_TAG + ">");
    }
    
    public static BallotDesign{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {

        int size = Util.readSimpleIntTag(lbl, r, "size");

        Util.swallowTag(lbl, r, "candidates");
        
        String{*lbl}[] n = new String[size<0?0:size];

        for (int i = 0; i < size; i++) {
            try {
                n[i] = Util.unescapeString(Util.readSimpleTag(lbl, r, "candidate"));
            }
            catch (ArrayIndexOutOfBoundsException imposs) { }
        }

        
        Util.swallowEndTag(lbl, r, "candidates");
        SingleChoiceBallotDesign b = new SingleChoiceBallotDesign(lbl, n);
        return b;
    }   
}