/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.common.CiphertextList;
import civitas.crypto.*;

import java.io.*;

/**
 * Similar to a <code>Vote</code>, but the capability is encrypted and signed,
 * and there is also a proof that the choice is in fact a valid choice.
 * This is part of what a voter submits; the tabulation process will strip
 * off the proof, and change the capability to be malleable (for the
 * re-encryption mixes). 
 */
public class VerifiableVote implements XMLSerializable {
    public static final String{*<-*} OPENING_TAG = "verifiableVote";

    /**
     * Indicates the election and block that this vote belongs to.
     */
    public final String{this} context;
    
    /**
     * Encrypted choice
     */
    public final ElGamal1OfLReencryption{this} encChoice;
    
    /**
     * Proof of knowledge of the voter's vote, including its 
     * capability, choice, and context.
     */
    public final ProofVote{this} proofVote;
    
    /**
     * Encrypted capability
     */
    public final ElGamalCiphertext{this} encCapability;

    public VerifiableVote(String{this} context, 
                          ElGamal1OfLReencryption{this} encChoice,
                          ElGamalCiphertext{this} encCapability,
                          ProofVote{this} proofVote) {
        this.context = context;
        this.encChoice = encChoice;
        this.encCapability = encCapability;
        this.proofVote = proofVote;
    }
    
    public boolean{this;vv} equals(VerifiableVote vv) {
        if (this == vv) return true;
        if (vv == null) return false;
        return (this.context == vv.context || (this.context != null && this.context.equals(vv.context))) && 
               (this.encChoice == vv.encChoice || (this.encChoice != null && this.encChoice.equals(vv.encChoice))) && 
               (this.encCapability == vv.encCapability || (this.encCapability != null && this.encCapability.equals(vv.encCapability))) && 
               (this.proofVote == vv.proofVote || (this.proofVote != null && this.proofVote.equals(vv.proofVote)));
    }
    
    public boolean verify(ElGamalPublicKey pubKey, CiphertextList ciphertexts, int L) {
        if (proofVote == null || encChoice == null) return false;
        if (pubKey == null) return false;
        return (encChoice.verify(pubKey, ciphertexts, L) && 
                proofVote.verify(pubKey.getParams(), encCapability, encChoice.getCiphertext(), context));
    }
    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<");
        sb.print(OPENING_TAG);
        sb.print(">");
        sb.print("<context>");
        Util.escapeString(this.context, lbl, sb);
        sb.print("</context>");
        sb.print("<encChoice>");
        if (this.encChoice != null) {
            this.encChoice.toXML(lbl, sb);
        }
        sb.print("</encChoice>");
        sb.print("<encCapability>");
        if (this.encCapability != null) {
            this.encCapability.toXML(lbl, sb);
        }
        sb.print("</encCapability>");
        sb.print("<proof>");
        if (this.proofVote != null) {
            this.proofVote.toXML(lbl, sb);
        }
        sb.print("</proof>");
        
        sb.print("</" + OPENING_TAG + ">");
    }
    
    public static VerifiableVote{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r) throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        Util.swallowTag(lbl, r, "verifiableVote");
        String context = Util.unescapeString(Util.readSimpleTag(lbl, r, "context"));
        Util.swallowTag(lbl, r, "encChoice");
        ElGamal1OfLReencryption encChoice = null;
        try {
            encChoice = CryptoUtil.factory().elGamal1OfLReencryptionFromXML(lbl, r);
        }
        catch (NullPointerException imposs) { }

        Util.swallowEndTag(lbl, r, "encChoice");
        Util.swallowTag(lbl, r, "encCapability");
        ElGamalCiphertext encCapability = null;
        try {
            encCapability = CryptoUtil.factory().elGamalCiphertextFromXML(lbl, r);
        }
        catch (NullPointerException imposs) { }

        Util.swallowEndTag(lbl, r, "encCapability");
        Util.swallowTag(lbl, r, "proof");
        ProofVote proofVote = null;
        try {
            proofVote = CryptoUtil.factory().proofVoteFromXML(lbl, r);
        }
        catch (NullPointerException imposs) { }
        Util.swallowEndTag(lbl, r, "proof");
        
        Util.swallowEndTag(lbl, r, "verifiableVote");
        return new VerifiableVote(context, encChoice, encCapability, proofVote);
    }    
}