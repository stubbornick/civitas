/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */ 
package civitas.common;

import civitas.crypto.*;
import java.io.*;
import jif.util.*;

/**
 * A BallotDesign describes a race. For example, in a "single choice" race,
 * there is a slate of candidates of which 
 * the voter may choose one; a ballot design for a single choice race (a 
 * SingleChoiceBallotDesign) lists the candidates on the slate.
 */
public abstract class BallotDesign implements XMLSerializable {
    public final static String{*<-*} OPENING_TAG = "ballotDesign";
    public void toXML{}(PrintWriter[{}]{} sb) {
        toXML(new label {}, sb);
    }
    public abstract void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl;    
    /**
     * Checks that the Ballot b is an acceptable ballot for this ballot design.
     * Throws an IllegalArgumentException is this is not the case.
     */
    public abstract void checkBallot{*lbl}(label{*lbl} lbl, Ballot[lbl]{*lbl} b) throws (IllegalArgumentException{*lbl});
    
    /**
     * decompose the ballot into a VoterSubmission. The iterator gives a supply
     * of capabilities, as a map from contexts for votes to 
     * <code>VoteCapability</code>s; an IllegalArgumentException is thrown if there are
     * insufficient capabilities.
     */
    public abstract VoterSubmission{*lbl} decompose{*lbl}(label{*lbl} lbl, Ballot[lbl]{*lbl} ballot, int{*lbl} voterBlock, 
                                                      ElGamalPublicKey{*lbl} key,
                                                      ElGamalCiphertext{*lbl}const[]{*lbl} ciphertexts,
                                                      String{*lbl} context, 
                                                      Map[lbl,lbl]{*lbl} capabilities) throws (IllegalArgumentException{*lbl});

    /**
     * Checks that the votes in VoterSubmission vs correspond to an acceptable
     * ballot for this ballot design. Throws an IllegalArgumentException is this
     * is not the case.
     */
    public final void checkVoterSubmission(VoterSubmission vs, String baseContext, CiphertextList ciphertexts, ElGamalPublicKey pubKey) throws (IllegalArgumentException{vs;baseContext;ciphertexts;pubKey}) {
        checkVoterSubmission(vs, 0, baseContext, ciphertexts, pubKey);
    }

    /**
     * Checks that the votes in VoterSubmission vs, from index
     * <code>startIndex</code> correspond to an acceptable ballot for this
     * ballot design. Throws an IllegalArgumentException is this is not the
     * case.
     */
    public abstract void checkVoterSubmission(VoterSubmission vs, int startIndex, String context, CiphertextList ciphertexts, ElGamalPublicKey pubKey) 
    throws (IllegalArgumentException{this;vs;startIndex;context;ciphertexts;pubKey});

    /**
     * The number of votes in a <code>VoteSubmission</code> that will be
     * produced by a single ballot for this ballot design.
     */
    public abstract int{this} votesProducedPerBallot();
    
    /**
     * Returns a list of the contexts that will be used in a vote submission.
     * The domain of the map capabilities given to the decompose method must
     * contain these strings.
     */
    public List[lbl]{*lbl} contextsNeeded{*lbl}(label{*lbl} lbl, String{*lbl} baseContext) throws (IllegalArgumentException{*lbl}) {
        List[lbl] l = new ArrayList[lbl]();
        contextsNeeded(lbl, l, baseContext);
        return l;
    }
    
    public abstract void contextsNeeded{*lbl}(label{*lbl} lbl, List[lbl]{*lbl} l, String{*lbl} context) throws (IllegalArgumentException{*lbl});

    public abstract String nthContext(int n);
    
    /**
     * The maximum number of choices that a single verifiable vote will be out
     * of. i.e., this determines the maximum value of L to be used in 1-of-L
     * re-encryptions.
     */
    public abstract int{this} maxPossibleChoices();

    /**
     * Tally the vote m with context c, given the parent context ctxt into the
     * tally state s.
     */
    public abstract void tally{*lbl}(label{*lbl} lbl, String{*lbl} ctxt, ElGamalMsg{*lbl} m, String{*lbl} c, TallyState[lbl]{*lbl} s, ElGamalParameters{*lbl} params) throws (IllegalArgumentException{*lbl});
    
    /**
     * Construct a new tally state.
     */
    public abstract TallyState[lbl]{*lbl2} newTallyState{*lbl2}(label{*lbl2} lbl, label{*lbl2} lbl2)  where lbl2 <= lbl;
    
    /**
     * Produce an appropriate BallotDesign from an XML representation. The super class needs
     * to know about all subclasses.
     */
    public static BallotDesign{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        BallotDesign bd = null;

        Util.swallowTag(lbl, r, OPENING_TAG);
        String kind = Util.unescapeString(Util.readSimpleTag(lbl, r, "kind"));
        if (kind == null) {
            throw new IOException("Unspecified kind");
        }
        else if (kind.equalsIgnoreCase(ApprovalBallotDesign.KIND)) {
            bd = ApprovalBallotDesign.fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(SingleChoiceBallotDesign.KIND)) {
            bd = SingleChoiceBallotDesign.fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(CondorcetBallotDesign.KIND)) {
            bd = CondorcetBallotDesign.fromXML(lbl, r);
        }
        else if (kind.equalsIgnoreCase(MultiBallotDesign.KIND)) {
            bd = MultiBallotDesign.fromXML(lbl, r);
        }
        else 
            throw new IOException("Unknown ballot kind: " + kind);
        Util.swallowEndTag(lbl, r, OPENING_TAG);
        return bd;
    }

}