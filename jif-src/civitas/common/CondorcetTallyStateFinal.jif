/*
 * This file is part of the Civitas software distribution.
 * Copyright (c) 2007-2008, Civitas project group, Cornell University.
 * See the LICENSE file accompanying this distribution for further license
 * and copyright information.
 */
package civitas.common;

import java.util.*;
import java.io.*;

/**
 * TallyStateFinal for a CondorcetBallotDesign.
 */
public class CondorcetTallyStateFinal extends TallyStateFinal {
    private final int{this} const[][]{this} matrix;
    private final int{this} size;

    CondorcetTallyStateFinal(label lbl, int{*lbl}[][]{*lbl} matrix, int{*lbl} size)
    where {*lbl} <= {this} {
        int{this} const[][] as = null;
        if (matrix != null) as = matrix.clone();
        this.matrix = as;
        this.size = size;
        super();
    }

    public void toXML{*lbl}(label lbl, PrintWriter[lbl]{*lbl} sb) where {this} <= lbl  {
        if (sb == null) return;
        sb.print("<" + OPENING_TAG + ">");
        sb.print("<kind>");
        sb.print(CondorcetBallotDesign.KIND);
        sb.print("</kind>");
        sb.print("<count>");
        sb.print(size);
        sb.print("</count>");

        sb.print("<matrix>");
        try {
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    if (i == j) continue;
                    sb.print("<entry>");
                    sb.print("<i>");
                    sb.print(i);
                    sb.print("</i>");
                    sb.print("<j>");
                    sb.print(j);
                    sb.print("</j>");
                    sb.print("<tally>");
                    sb.print(matrix[i][j]);
                    sb.print("</tally>");
                    sb.print("</entry>");
                }
            }
        }
        catch (NullPointerException imposs) { }
        catch (ArrayIndexOutOfBoundsException imposs) { }
        sb.print("</matrix>");
        sb.print("</" + OPENING_TAG + ">");
    }

    public static TallyStateFinal{*lbl} fromXML{*lbl}(label{*lbl} lbl, Reader[lbl]{*lbl} r)  throws (IllegalArgumentException{*lbl}, IOException{*lbl}) {
        int count = Util.readSimpleIntTag(lbl, r, "count");

        int{*lbl}[][] matrix = new int[count<0 ? 0 : count][count<0 ? 0 : count];

        Util.swallowTag(lbl, r, "matrix");
        try {
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    if (i == j) continue;
                    try {
                        Util.swallowTag(lbl, r, "entry");
                        if (i != Util.readSimpleIntTag(lbl, r, "i") || j != Util.readSimpleIntTag(lbl, r, "j")) {
                            throw new IOException("Expected pair (" + i + "," + j +")");
                        }
                        matrix[i][j] = Util.readSimpleIntTag(lbl, r, "tally");
                        Util.swallowEndTag(lbl, r, "entry");
                    }
                    catch (ArrayIndexOutOfBoundsException imposs) { }
                    catch (NullPointerException imposs) { }
                }
            }
        }
        catch (NullPointerException imposs) { }

        Util.swallowEndTag(lbl, r, "matrix");
        CondorcetTallyStateFinal b = new CondorcetTallyStateFinal(lbl, matrix, count);
        return b;
     }
}